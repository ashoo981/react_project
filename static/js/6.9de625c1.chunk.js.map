{"version":3,"sources":["services/auth.services.js","store/actions/auth.actions.js","pages/Login.js"],"names":["username","password","a","callApi","method","data","JSON","stringify","response","Promise","reject","sessionStorage","clear","localStorage","removeItem","authService","login","logout","authActions","dispatch","user","type","authConstants","LOGIN_REQUEST","then","result","LOGIN_SUCCESS","success","catch","errMsg","error","LOGIN_FAILURE","alert","console","log","LOGOUT","mapDispatchToProps","connect","state","authentication","loggingIn","loggedIn","props","useEffect","to","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","Item","label","name","rules","required","Password","valuePropName","offset","htmlType"],"mappings":"mQAEA,WAAqBA,EAAUC,GAA/B,eAAAC,EAAA,4DACsB,qBADtB,kBAG6BC,YAFP,qBAE4B,CAAEC,OAAQ,OAAQC,KAAMC,KAAKC,UAAU,CAAEP,WAAUC,eAHrG,cAGYO,EAHZ,yBAIeA,GAJf,yDAMeC,QAAQC,OAAR,OANf,0D,kEAUA,sBAAAR,EAAA,sDACIS,eAAeC,QACfC,aAAaC,WAAW,SAF5B,4C,sBAKO,IAAMC,EAAc,CAAEC,M,8CAAOC,O,4CCgB7B,IAAMC,EAAc,CAAEF,MA9Bf,SAAChB,EAAUC,GACrB,OAAO,SAACkB,GAWR,IAAiBC,EAVbD,GAUaC,EAVI,CAAEpB,YAWZ,CAAEqB,KAAMC,IAAcC,cAAeH,UAV5BL,EAAYC,MAAMhB,EAAUC,GACpCuB,MAAK,SAAAC,GACTN,EAWR,SAAiBC,GACb,MAAO,CAAEC,KAAMC,IAAcI,cAAeN,QAZ/BO,CAAQF,OAClBG,OAAM,SAAUC,GAcvB,IAAiBC,EAbTX,GAaSW,EAbQ,OAcd,CAAET,KAAMC,IAAcS,cAAeD,WAbxCE,MAAM,6DACNC,QAAQC,IAAI,aAqBYjB,OALpC,WAEI,OADAF,EAAYE,SACL,CAAEI,KAAMC,IAAca,U,OCuC3BC,EAAkB,eAAQlB,GAEjBmB,uBAPS,SAACC,GACrB,MAAgCA,EAAMC,eACtC,MAAO,CAAEC,UADT,EAAQA,UACYC,SADpB,EAAmBA,YAMiBL,EAAzBC,EAhED,SAACK,GAQXC,qBAAU,WACND,EAAMzB,WACP,IAMH,OAAIyB,EAAMD,SACC,cAAC,IAAD,CAAUG,GAAI,MAGjB,eAAC,IAAD,CACIC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,cAAe,CAAEC,UAAU,GAC3BC,SAtBK,SAACC,GACdlB,QAAQC,IAAI,WAAYiB,GACxB,IAAQnD,EAAuBmD,EAAvBnD,SAAUC,EAAakD,EAAblD,SAClByC,EAAM1B,MAAMhB,EAAUC,IAoBdmD,eAbW,SAACC,GACpBpB,QAAQC,IAAI,UAAWmB,IAOnB,UAOI,cAAC,IAAKC,KAAN,CACIC,MAAM,+BACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,IAHxB,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKJ,KAAN,CACIC,MAAM,aACNC,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,IAHxB,SAKI,cAAC,IAAMC,SAAP,MAGJ,cAAC,IAAKL,KAAN,CAAWE,KAAK,WAAWI,cAAc,UAAUb,WAAY,CAAEc,OAAQ,EAAGf,KAAM,IAAlF,SACI,cAAC,IAAD,4BAGJ,cAAC,IAAKQ,KAAN,CAAWP,WAAY,CAAEc,OAAQ,EAAGf,KAAM,IAA1C,SACI,cAAC,IAAD,CAAQzB,KAAK,UAAUyC,SAAS,SAAhC","file":"static/js/6.9de625c1.chunk.js","sourcesContent":["import { callApi } from \"./base.services\";\r\n\r\nasync function login(username, password) {\r\n    var serviceName = \"Users/Authenticate\";\r\n    try {\r\n        let response = await callApi(serviceName, { method: \"POST\", data: JSON.stringify({ username, password })});\r\n        return response;\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n}\r\n\r\nasync function logout() {\r\n    sessionStorage.clear();\r\n    localStorage.removeItem(\"token\");\r\n}\r\n\r\nexport const authService = { login, logout };","import {authConstants} from '../../constants/auth.constants';\r\nimport {authService} from '../../services/auth.services'\r\n\r\nconst login = (username, password) => {\r\n    return (dispatch) => {\r\n        dispatch(request({ username }));\r\n        const promise = authService.login(username, password);\r\n        promise.then(result => {\r\n            dispatch(success(result))\r\n        }).catch(function (errMsg) {\r\n            dispatch(failure('hata'))\r\n            alert(\"Kullanıcı Adı veya Şifre Hatalı!\")\r\n            console.log('hata');\r\n        });\r\n    }\r\n    function request(user) {\r\n        return { type: authConstants.LOGIN_REQUEST, user }\r\n    }\r\n\r\n    function success(user) {\r\n        return { type: authConstants.LOGIN_SUCCESS, user }\r\n    }\r\n\r\n    function failure(error) {\r\n        return { type: authConstants.LOGIN_FAILURE, error }\r\n    }\r\n}\r\n\r\nfunction logout() {\r\n    authService.logout();\r\n    return { type: authConstants.LOGOUT };\r\n}\r\n\r\nexport const authActions = { login, logout };","import React from 'react';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authActions } from '../store/actions/auth.actions'\r\nimport { useEffect } from 'react';\r\n\r\nconst Login = (props) => {\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        const { username, password } = values;\r\n        props.login(username, password);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.logout();\r\n    }, []);\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    if (props.loggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    } else {\r\n        return (\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n            >\r\n                <Form.Item\r\n                    label=\"Kullanıcı Adı\"\r\n                    name=\"username\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Şifre\"\r\n                    name=\"password\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"remember\" valuePropName=\"checked\" wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Checkbox>Remember me</Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Giriş Yap\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { loggingIn, loggedIn } = state.authentication;\r\n    return { loggingIn, loggedIn };\r\n}\r\n\r\nconst mapDispatchToProps = { ...authActions };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"],"sourceRoot":""}